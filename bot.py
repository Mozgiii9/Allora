import logging
import subprocess
import socket
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler
from dotenv import load_dotenv
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
def get_server_info():
    try:
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        uptime = subprocess.check_output("uptime -p", shell=True).decode('utf-8').strip()
        return f"üåê *IP-–∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:* `{ip_address}`\n‚è± *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞:* `{uptime}`"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ."

async def start(update: Update, context) -> None:
    server_info = get_server_info()
    commands = (
        "‚öôÔ∏è /ETHprice - *–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH*\n"
        "üîç /checkstatus - *–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤*\n"
        "üîÑ /restartcontainer - *–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã*\n"
        "‚è≥ /uptimecontainer - *–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤*\n"
        "üîî /alert - *–ü–æ–ª—É—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤*\n"
    )
    await update.message.reply_text(
        f'üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–æ–¥—ã Allora.*\n\n'
        f'{server_info}\n\n'
        f'üìú *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n{commands}',
        parse_mode='Markdown'
    )

async def eth_price(update: Update, context) -> None:
    try:
        result = subprocess.check_output("curl -s http://localhost:8000/inference/ETH", shell=True).decode('utf-8')
        await update.message.reply_text(f"üí∞ *–¶–µ–Ω–∞ ETH: $* `{result}`", parse_mode='Markdown')
    except subprocess.CalledProcessError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É ETH. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–¥—ã.")

async def check_status(update: Update, context) -> None:
    try:
        containers = {
            'updater': 'basic-coin-prediction-node-updater',
            'inference': 'basic-coin-prediction-node-inference',
            'worker': 'alloranetwork/allora-offchain-node:latest'
        }
        status_text = ''
        for key, name in containers.items():
            result = subprocess.check_output(f"docker inspect --format '{{{{.State.Status}}}}' $(docker ps -q --filter ancestor={name})", shell=True).decode('utf-8').strip()
            status_text += f"üì¶ *–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {key}:* `{result}`\n"
        await update.message.reply_text(status_text, parse_mode='Markdown')
    except subprocess.CalledProcessError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")

async def restart_container(update: Update, context) -> None:
    try:
        containers = ['basic-coin-prediction-node-updater', 'basic-coin-prediction-node-inference', 'alloranetwork/allora-offchain-node:latest']
        restarted = False
        for container in containers:
            status = subprocess.check_output(f"docker inspect --format '{{{{.State.Status}}}}' $(docker ps -q --filter ancestor={container})", shell=True).decode('utf-8').strip()
            if status != "running":
                subprocess.check_call(f"docker restart $(docker ps -q --filter ancestor={container})", shell=True)
                restarted = True
        if restarted:
            await update.message.reply_text("üîÑ *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã.*", parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ *–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç.*", parse_mode='Markdown')
    except subprocess.CalledProcessError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã.")

async def uptime_container(update: Update, context) -> None:
    try:
        containers = ['basic-coin-prediction-node-updater', 'basic-coin-prediction-node-inference', 'alloranetwork/allora-offchain-node:latest']
        uptime_text = ''
        for container in containers:
            result = subprocess.check_output(f"docker ps -f ancestor={container} --format '{{{{.Status}}}}'", shell=True).decode('utf-8').strip()
            uptime_text += f"‚è≥ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ {container}:* `{result}`\n"
        await update.message.reply_text(uptime_text, parse_mode='Markdown')
    except subprocess.CalledProcessError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")

async def alert(update: Update, context) -> None:
    try:
        containers = {
            'updater': 'basic-coin-prediction-node-updater',
            'inference': 'basic-coin-prediction-node-inference',
            'worker': 'alloranetwork/allora-offchain-node:latest'
        }
        alert_text = ''
        for key, name in containers.items():
            status = subprocess.check_output(f"docker inspect --format '{{{{.State.Status}}}}' $(docker ps -q --filter ancestor={name})", shell=True).decode('utf-8').strip()
            if status != 'running':
                alert_text += f"‚ö†Ô∏è *–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä {key} (image: {name}) –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!*\n"
        if alert_text:
            await update.message.reply_text(alert_text, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚úÖ *–í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.*", parse_mode='Markdown')
    except subprocess.CalledProcessError:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤.")

def main():
    TOKEN = "TELEGRAM_BOT_TOKEN"

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("ETHprice", eth_price))
    app.add_handler(CommandHandler("checkstatus", check_status))
    app.add_handler(CommandHandler("restartcontainer", restart_container))
    app.add_handler(CommandHandler("uptimecontainer", uptime_container))
    app.add_handler(CommandHandler("alert", alert))

    app.run_polling()

if __name__ == '__main__':
    main()
