#!/bin/bash

# –õ–æ–≥–æ—Ç–∏–ø
echo -e '\e[40m\e[32m'
echo -e '‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó '
echo -e '‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó'
echo -e '‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù'
echo -e '‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó'
echo -e '‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë'
echo -e '‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù'
echo -e '\e[0m'

echo -e "\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö} —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto\n"

sleep 2

while true; do
    echo "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Allora"
    echo "2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã Allora"
    echo "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–æ–¥—ã Allora"
    echo "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Allora"
    echo "5. –í—ã–π—Ç–∏ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞"
    read -p "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: " option

    case $option in
        1)
            echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã..."

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
            if sudo apt update && sudo apt upgrade -y; then
                echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
            if sudo apt install ca-certificates zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev curl git wget make -y; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Python..."
            if sudo apt install python3 -y; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è Python:"
            python3 --version

            if sudo apt install python3-pip -y; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –¥–ª—è Python: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ pip –¥–ª—è Python: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è pip –¥–ª—è Python:"
            pip3 --version

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
            if curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg &&
               echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null &&
               sudo apt-get update &&
               sudo apt-get install docker-ce docker-ce-cli containerd.io -y; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è Docker:"
            docker version

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
            if sudo apt-get install docker-compose -y; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è Docker Compose:"
            docker-compose version

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Docker..."
            if sudo groupadd docker && sudo usermod -aG docker $USER; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Docker: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è Docker: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –±—ã–ª–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            fi

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GO
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ GO..."
            if sudo rm -rf /usr/local/go &&
               curl -L https://go.dev/dl/go1.22.4.linux-amd64.tar.gz | sudo tar -xzf - -C /usr/local &&
               echo 'export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin' >> $HOME/.bash_profile &&
               echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> $HOME/.bash_profile &&
               source $HOME/.bash_profile; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ GO: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ GO: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è GO:"
            go version

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Allorad Wallet
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Allorad Wallet..."
            if git clone https://github.com/allora-network/allora-chain.git &&
               cd allora-chain && make all; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Allorad Wallet: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Allorad Wallet: –û—à–∏–±–∫–∞"
                exit 1
            fi

            echo "–í–µ—Ä—Å–∏—è Allorad Wallet:"
            allorad version

            # –í–≤–æ–¥ seed —Ñ—Ä–∞–∑—ã –∏ –ø–∞—Ä–æ–ª—è –æ—Ç –∫–æ—à–µ–ª—å–∫–∞
            echo "–í–≤–µ–¥–∏—Ç–µ seed —Ñ—Ä–∞–∑—É –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è Allorad..."
            if allorad keys add testkey --recover; then
                echo "–í–≤–æ–¥ seed —Ñ—Ä–∞–∑—ã –∏ –ø–∞—Ä–æ–ª—è –æ—Ç –∫–æ—à–µ–ª—å–∫–∞: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–í–≤–æ–¥ seed —Ñ—Ä–∞–∑—ã –∏ –ø–∞—Ä–æ–ª—è –æ—Ç –∫–æ—à–µ–ª—å–∫–∞: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker
            echo "–ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker..."
            if cd $HOME && git clone https://github.com/allora-network/basic-coin-prediction-node &&
               cd basic-coin-prediction-node &&
               mkdir worker-data head-data &&
               sudo chmod -R 777 worker-data head-data; then
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Worker: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞
            echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ head..."
            if sudo docker run -it --entrypoint=bash -v $PWD/head-data:/data alloranetwork/allora-inference-base:latest -c "mkdir -p /data/keys && (cd /data/keys && allora-keys)"; then
                echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ head: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ head: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –°–æ–∑–¥–∞–Ω–∏–µ Worker –∫–ª—é—á–∞
            echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ worker..."
            if sudo docker run -it --entrypoint=bash -v $PWD/worker-data:/data alloranetwork/allora-inference-base:latest -c "mkdir -p /data/keys && (cd /data/keys && allora-keys)"; then
                echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ worker: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ worker: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á head-id
            echo "–ü–æ–ª—É—á–µ–Ω–∏–µ head-id..."
            head_id=$(cat head-data/keys/identity)
            if [ -z "$head_id" ]; then
                echo "–ü–æ–ª—É—á–µ–Ω–∏–µ head-id: –û—à–∏–±–∫–∞"
                exit 1
            else
                echo "–ü–æ–ª—É—á–µ–Ω–∏–µ head-id: –£—Å–ø–µ—à–Ω–æ"
            fi

            # –ó–∞–ø—Ä–æ—Å–∏—Ç—å seed —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            read -p "–í–≤–µ–¥–∏—Ç–µ seed —Ñ—Ä–∞–∑—É: " seed_phrase

            # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml..."
            if sudo apt install nano -y && rm -rf docker-compose.yml; then
                echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ docker-compose.yml
            cat <<EOL > docker-compose.yml
version: '3'

services:
  inference:
    container_name: inference-basic-eth-pred
    build:
      context: .
    command: python -u /app/app.py
    ports:
      - "8000:8000"
    networks:
      eth-model-local:
        aliases:
          - inference
        ipv4_address: 172.22.0.4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/inference/ETH"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - ./inference-data:/app/data

  updater:
    container_name: updater-basic-eth-pred
    build: .
    environment:
      - INFERENCE_API_ADDRESS=http://inference:8000
    command: >
      sh -c "
      while true; do
        python -u /app/update_app.py;
        sleep 24h;
      done
      "
    depends_on:
      inference:
        condition: service_healthy
    networks:
      eth-model-local:
        aliases:
          - updater
        ipv4_address: 172.22.0.5

  worker:
    container_name: worker-basic-eth-pred
    environment:
      - INFERENCE_API_ADDRESS=http://inference:8000
      - HOME=/data
    build:
      context: .
      dockerfile: Dockerfile_b7s
    entrypoint:
      - "/bin/bash"
      - "-c"
      - |
        if [ ! -f /data/keys/priv.bin ]; then
          echo "Generating new private keys..."
          mkdir -p /data/keys
          cd /data/keys
          allora-keys
        fi
        # Change boot-nodes below to the key advertised by your head
        allora-node --role=worker --peer-db=/data/peerdb --function-db=/data/function-db \
          --runtime-path=/app/runtime --runtime-cli=bls-runtime --workspace=/data/workspace \
          --private-key=/data/keys/priv.bin --log-level=debug --port=9011 \
          --boot-nodes=/ip4/172.22.0.100/tcp/9010/p2p/$head_id \
          --topic=1 \
          --allora-chain-key-name=testkey \
          --allora-chain-restore-mnemonic='$seed_phrase' \
          --allora-node-rpc-address=https://allora-rpc.edgenet.allora.network/ \
          --allora-chain-topic-id=1
    volumes:
      - ./worker-data:/data
    working_dir: /data
    depends_on:
      - inference
      - head
    networks:
      eth-model-local:
        aliases:
          - worker
        ipv4_address: 172.22.0.10

  head:
    container_name: head-basic-eth-pred
    image: alloranetwork/allora-inference-base-head:latest
    environment:
      - HOME=/data
    entrypoint:
      - "/bin/bash"
      - "-c"
      - |
        if [ ! -f /data/keys/priv.bin ]; then
          echo "Generating new private keys..."
          mkdir -p /data/keys
          cd /data/keys
          allora-keys
        fi
        allora-node --role=head --peer-db=/data/peerdb --function-db=/data/function-db  \
          --runtime-path=/app/runtime --runtime-cli=bls-runtime --workspace=/data/workspace \
          --private-key=/data/keys/priv.bin --log-level=debug --port=9010 --rest-api=:6000
    ports:
      - "6000:6000"
    volumes:
      - ./head-data:/data
    working_dir: /data
    networks:
      eth-model-local:
        aliases:
          - head
        ipv4_address: 172.22.0.100

networks:
  eth-model-local:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/24

volumes:
  inference-data:
  worker-data:
  head-data:
EOL

            # –ó–∞–ø—É—Å–∫ Worker'–∞
            echo "–ó–∞–ø—É—Å–∫ Worker'–∞..."
            if docker compose build && docker compose up -d; then
                echo "–ó–∞–ø—É—Å–∫ Worker'–∞: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–ó–∞–ø—É—Å–∫ Worker'–∞: –û—à–∏–±–∫–∞"
                exit 1
            fi

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã..."
            if curl --location 'http://localhost:6000/api/v1/functions/execute' \
                --header 'Content-Type: application/json' \
                --data '{
                    "function_id": "bafybeigpiwl3o73zvvl6dxdqu7zqcub5mhg65jiky2xqb4rdhfmikswzqm",
                    "method": "allora-inference-function.wasm",
                    "parameters": null,
                    "topic": "1",
                    "config": {
                        "env_vars": [
                            {
                                "name": "BLS_REQUEST_PATH",
                                "value": "/api"
                            },
                            {
                                "name": "ALLORA_ARG_PARAMS",
                                "value": "ETH"
                            }
                        ],
                        "number_of_nodes": -1,
                        "timeout": 2
                    }
                }'; then
                echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã: –û—à–∏–±–∫–∞"
            fi

            echo -e "\n–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö} —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto\n"
            ;;
        2)
            echo "–ß–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥ –ø–æ–π–¥—É—Ç –ª–æ–≥–∏. –î–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤ –Ω–∞–∂–º–∏—Ç–µ CTRL+C. –ü–æ–∫–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª may.crypto{ü¶Ö} —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ —Å–∞–º—ã—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–¥ - https://t.me/maycrypto\n"
            sleep 60
            container_id=$(docker ps --filter "ancestor=basic-coin-prediction-node-worker" --format "{{.ID}}")
            if [ -z "$container_id" ]; then
                echo "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å IMAGE 'basic-coin-prediction-node-worker' –Ω–µ –Ω–∞–π–¥–µ–Ω."
            else
                docker logs -f $container_id
            fi
            ;;
        3)
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã..."
            if curl --location 'http://localhost:6000/api/v1/functions/execute' \
                --header 'Content-Type: application/json' \
                --data '{
                    "function_id": "bafybeigpiwl3o73zvvl6dxdqu7zqcub5mhg65jiky2xqb4rdhfmikswzqm",
                    "method": "allora-inference-function.wasm",
                    "parameters": null,
                    "topic": "1",
                    "config": {
                        "env_vars": [
                            {
                                "name": "BLS_REQUEST_PATH",
                                "value": "/api"
                            },
                            {
                                "name": "ALLORA_ARG_PARAMS",
                                "value": "ETH"
                            }
                        ],
                        "number_of_nodes": -1,
                        "timeout": 2
                    }
                }'; then
                echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã: –£—Å–ø–µ—à–Ω–æ"
            else
                echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã: –û—à–∏–±–∫–∞"
            fi
            ;;
        4)
            echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã..."
            response=$(curl -s http://localhost:8000/update)
            if [ "$response" == "0" ]; then
                echo "–í–µ—Ä—Å–∏—è –Ω–æ–¥—ã –∞–∫—Ç—É–∞–ª—å–Ω–∞."
            else
                echo "–í–µ—Ä—Å–∏—è –Ω–æ–¥—ã –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞."
            fi
            ;;
        5)
            echo "–í—ã—Ö–æ–¥ –∏–∑ —Å–∫—Ä–∏–ø—Ç–∞."
            exit 0
            ;;
        *)
            echo "–ù–µ–≤–µ—Ä–Ω–∞—è –æ–ø—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2, 3, 4 –∏–ª–∏ 5."
            ;;
    esac
done
